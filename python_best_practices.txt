+============
+ Comments
+============
  Include a when / who / what change history banner at the top of each program.
  Document any approach used that was chosen over other alternatives and why it was chosen.
+============
+ Variables
+============
  Use underscore to separate words in a variable name. For example, "customer_info" (better) versus "customerinfo". ( Using underscores typically improves clarity in variable naming in programming.)
  Use all capital letters in its name to indicate a variable should be treated as a constant and never be changed  (Example MAX_CONNECTIONS = 5 )
  List variable names should be plural (e.g., items, stores, dates) since they are intended for groups of things.
  For the temporary variable in a for loop that will be associated with each value in the list use a meaningful name that represents a single item from the list. Example: for dog in dogs:
  - Variable names 
    - Boolean - Use prefixes commonly associated with boolean values, such as is_, has_, can_, or should_. This makes it clear that the variable is a boolean without adding ambiguous suffixes, e.g., is_visible instead of visible_ind.
+============
+ White Space
+============
  - To group parts of your program visually, use a blank line between parts.
+=============
+ Conditionals
+=============
  - Use a single space around comparison operators, such as ==, >=, and <=.  For example, "if age < 4:" (is better than "if age<4:").
  - To improve readability, use parentheses around the individual tests. For example, "if (a > b) and (a < d ):" (is better than "if a > b and a < d:").
+===================
+ IDE / code editor
+===================
 - Configure your editor so it always inserts four spaces each time you press the TAB key.
 - Configure your editor so it shows a vertical guideline to help you follow the 79-character limit. (My preference is two rulers, one at 70 and another at 80.)
+===================
+ Functions
+===================
  - Use "from typing import List" to use type hints. For example:  def function_name(argument_name: List[str]) -> None:
  - Functions that do not return a value
      1) Use the type hint for the return value. Example: def function_name(argument_name: List[str]) -> None:
      2) Use the docstring:
            """ 
            This function does not return a value.
            """
